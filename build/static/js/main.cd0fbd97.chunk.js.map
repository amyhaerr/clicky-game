{"version":3,"sources":["components/Scoreboard/Scoreboard.js","components/Card/Card.js","components/Wrapper/Wrapper.js","components/Title/Title.js","Container.js","Row.js","Column.js","App.js","serviceWorker.js","index.js"],"names":["Scoreboard","props","className","href","title","id","rightWrong","score","topScore","Cards","value","onClick","handleClick","alt","name","src","image","Wrapper","children","Title","Container","fluid","Row","Column","size","split","map","join","shuffleAvatars","array","i","length","j","Math","floor","random","App","state","avatar","currentScore","clickedAvatar","indexOf","handleIncrement","setState","concat","handleReset","newScore","handleShuffle","shuffledAvatars","this","avatars","key","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.cd0fbd97.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./Scoreboard.css\";\n\nconst Scoreboard = props => (\n    // <header className=\"scoreB\">\n    //     <div className=\"row\">\n    //         <div className=\"col-md-6 col-left\"><h4>{props.title}</h4></div>\n    //         <div className=\"col-md-3 col-right\"><h4>Current Score {props.score}</h4></div>\n    //         <div className=\"col-md-3 col-right\"><h4>Top Score {props.topScore}</h4></div>\n    //        </div>\n    //        <div className=\"row\">\n    //            <div className=\"col-md-12 col-right\">\n    //              <h5>Click on an image, but don't click on the same one more than once\n    //                  </h5></div>\n    //         </div>\n    //     </header>\n    <nav>\n      <ul>\n        <li className=\"brand animated lightSpeedIn\">\n          <a href=\"/clicky-game/\">{props.title}</a>\n        </li>\n\n        <li id=\"rw\">{props.rightWrong}</li>\n\n        <li id=\"cur-sco\">Current Score: {props.score}</li>\n\n        <li id=\"top-sco\">Top Score: {props.topScore}</li>\n      </ul>\n    </nav>\n  );\n\n\nexport default Scoreboard;\n","import React from \"react\";\nimport \"./Card.css\";\n\nconst Cards = props => (\n    <div \n    className=\"card\" \n    value={props.id}\n    onClick={() => props.handleClick(props.id)}>\n        <div className=\"img-container\">\n            <img alt={props.name} src={props.image}/>  \n        </div>\n    </div>\n\n);\n\nexport default Cards;","import React from \"react\";\nimport \"./Wrapper.css\";\n\n\nconst Wrapper = (props) => <div className=\"wrapper\" >{props.children}</div>;\n\n\n\nexport default Wrapper;\n","import React from \"react\";\nimport \"./Title.css\";\n\nconst Title = props => <h1 className=\"title\">{props.children}</h1>;\n\nexport default Title;","import React from \"react\";\n\nconst Container = props =>\n<div className={`container${props.fluid ? \"-fluid\" : \"\"}`}>\n    {props.children}\n</div>;\n\nexport default Container;","import React from \"react\";\n\nconst Row = props =>\n<div className={`row${props.fluid ? \"-fluid\" : \"\"}`}>\n    {props.children}\n</div>\n\nexport default Row; ","import React from \"react\";\n\nconst Column = props => {\n  const size = props.size\n    .split(\" \")\n    .map(size => \"col-\" + size)\n    .join(\" \");\n  return ( \n    <div className={size}>\n      {props.children}\n    </div>);\n};\n\nexport default Column;\n","import React, { Component } from \"react\";\nimport avatar from \"./cards.json\";\nimport Scoreboard from \"./components/Scoreboard\";\nimport Card from \"./components/Card\";\nimport Wrapper from \"./components/Wrapper\";\nimport Title from \"./components/Title\";\nimport Container from \"./Container\";\nimport Row from \"./Row\";\nimport Column from \"./Column\";\nimport \"./App.css\";\n\n// shuffle upon click\nfunction shuffleAvatars (array) {\n  for (let i = array.length - 1; i > 0; i--) {\n    const j = Math.floor(Math.random() * (i + 1));\n    [array[i], array[j]] = [array[j], array[i]];\n  }\n  return array;\n}\n\nclass App extends Component {\n  state = {\n    avatar,\n    currentScore: 0,\n    topScore: 0,\n    rightWrong: \"Click an image to start\",\n    clickedAvatar: [],\n  };\n\n  handleClick = (id) => {\n    // assign empty state array to let it be updated\n    if (this.state.clickedAvatar.indexOf(id) === -1) {\n      this.handleIncrement();\n      this.setState({ clickedAvatar: this.state.clickedAvatar.concat(id) });\n    } else {\n      this.handleReset();\n    }\n  };\n\n  handleIncrement = () => {\n    const newScore = this.state.currentScore + 1;\n    this.setState({\n      currentScore: newScore,\n      rightWrong: \"Yip! Yip! You earned a point!\",\n    });\n    if (newScore >= this.state.topScore) {\n      this.setState({ topScore: newScore });\n    } else if (newScore === 12) {\n      this.setState({ rightWrong: \"You've won!\" });\n    }\n    this.handleShuffle();\n  };\n\n  handleReset = () => {\n    this.setState({\n      currentScore: 0,\n      topScore: this.state.topScore,\n      rightWrong: \"Nice try! Game Restart!\",\n      clickedAvatar: [],\n    });\n    this.handleShuffle();\n  };\n\n  // shuffle image\n  handleShuffle = () => {\n    let shuffledAvatars = shuffleAvatars(avatar);\n    this.setState({ avatar: shuffledAvatars });\n  };\n\n  render() {\n    return (\n      <Wrapper>\n        <Scoreboard\n          title=\"Clicky Game\"\n          score={this.state.currentScore}\n          topScore={this.state.topScore}\n          rightWrong={this.state.rightWrong}\n        />\n\n        <Title>\n          Click on an image to earn points. Don't click on an image more than\n          once or you will lose!\n        </Title>\n\n        <Container>\n          <Row>\n            {this.state.avatar.map (avatars => (\n              <Column size=\"md-3 sm-6\">\n                <Card\n                  key={avatars.id}\n                  handleClick={this.handleClick}\n                  handleIncrement={this.handleIncrement}\n                  handleReset={this.handleReset}\n                  handleShuffle={this.handleShuffle}\n                  id={avatars.id}\n                  image={avatars.image}\n                />\n              </Column>\n            ))}\n          </Row>\n        </Container>\n      </Wrapper>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  \n    <App />,\n  \n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}